---
date: "`r Sys.Date()`"
title-block-style: default
subtitle  : "Itemanalyse"
abstract-title: "Zusammenfassung"
title-block-banner: true
title-block-categories: true
title-block-banner-color: "white"
abstract:  "In dem Modul Grundlagen der Diagnostik (**PsyBSc8**) lernt ihr im Seminar ein psychologisches Testverfahren zu erstellen und empirisch zu überprüfen. In diesem Zusammenhang führen viele von euch wahrscheinlich das erste Mal eine Itemanalyse und eine Exploratorische Faktorenanalyse durch. Hier könnt ihr noch einmal in aller Ruhe nachlesen, was euch im Praktikum schon einmal vorgeführt wurde."
---

# Einlesen der Daten

-   Als Probedaten verwenden wir einen im vergangen Semestern des PsyBSc8 Testkonstruktionsseminars konstruierten Fragebogen zu *Umweltbewusstsein*

-   Neben den 29 Items der Rohfassung des Fragebogens zu Umweltbewusstsein enthält der Datensatz zusätzlich demographische Informationen über das Alter, Geschlecht, Wohnsituation sowie Bildungsgrad der 104 Proband:innen

-   Der Datensatz ist in diesem Fall als rds-Datei gespeichert und kann mittels base-R oder des readr-Package eingelesen werden.

::: callout-note
## Information

Infotext zu verschiedenen einlesen Arten, je nach filie (sav, csv, tsv, rds) und verschiedene Packages
:::

Bevor wir mit der Analyse beginnen können, muss der Datensatz eingelesen werden. Hierfür gibt es mehrere Packages, die diesen ersten Schritt erleichtern. Mit dem Package `foreign` können besonders gut SPSS-Dateien (.sav) geladen werden. Mit dem Package `readr` (aus der Familie des `tidyverse`) können ansonsten die typischsten Datenformate (wie unter anderem .csv, .tsv und .txt) geladen werden. Schließlich gibt es noch das `readxl` Package, mit dem Excel-Dateien (.xls und .xlsx) eingelesen werden können. Für unseren Beispieldatensatz benötigen wir das Package `readr`. Wir laden hierbei das komplette tidyvere-package, welches im Hintergrund das readr-Package sowie noch andere relevante Packages läd (z.B. `dplyr`).

```{r}
#| message: false
library(tidyverse) 
library(here)

data_raw <- read_rds(here("data/raw/data_ub_raw.rds"))

#data_item_raw <- read_rds(here("data/processed/data_ub_item_proc.rds"))
skimr::skim(data_raw)
glimpse(data_raw, width = 50) 
test <- read_csv2(here("data/raw/data_ub_raw.csv"))
```

Bevor wir mit der deskriptiven Analyse beginnen, sollten wir noch überprüfen, ob es fehlende Werte (NAs) im Datensatz gibt.

```{r}
anyNA(data_item_raw)
sum(is.na(data_item_raw)) # Alternative
naniar::miss_summary(data_item_raw)

```

In diesem Fall, sind keine fehlenden Werte vorhanden. Es müssen also keine Werte entfernt werden. Wenn in eurem eigenen Fragebogen fehlenden Werte vorkommen sollten, können sie durch die Funktion `na.omit()`.

```{r}
data_item <- na.omit(data_item_raw)
anyNA(data_item)

```

# Deskriptive Analyse

Bevor wir die Itemanalyse durchführen, wollen wir uns zunächst ein wenig mit den Daten vertraut machen. Hierfür benötigen wir zwei Packages: . Das `psych`-Package beinhaltet sehr viele Funktionen und Befehle, die auch für viele andere Analysen hilfreich sind. Das Package `janitor` ist eine bessere Alternative zum Basis-Befehl `table()` und ist besonders informativ bei Häufigkeitstabellen.

Für die Berechnung deskriptiver Kennwerte (Mittelwert, Standardabweichung, Median, etc.) können wir die `describe()` Funktion des psych-Packages verwenden:

```{r}
#| message: false

library(psych)
sjPlot::tab_df(describe(data_item), show.rownames = TRUE)

```

Wenn wir nur eine spezifische Variable deskriptiv betrachten wollen (z.B. ub_01), kann in der gleichen Funktion die Variable direkt angesteuert werden.

```{r}
describe(data_item$ub_01)
```

Für alle kategoriellen Daten (z.B. Geschlecht, SÖS, Bildung) benötigen keine Mittelwerte oder Standardabweichungen, sondern nutzen Häufigkeitsverteilung zur deskriptiven Beschreibung. Hier kommt jetzt das janitor-Package zum Einsatz.

```{r}
#| message: false
library(janitor)
tabyl(test$DD02, show_na = F)

```

Wir bekommen die relativen und absoluten Häufigkeiten für männliche und weibliche Probanden ausgegeben. Falls es fehlenden Werte gäbe, müssten diese im Bericht auch angegeben werden. Dies ist ebenfalls mit der gleichen Funktion durch die Spezifizierung eineszusätzlichen Arguments möglich.

```{r}
#| eval: false
tabyl(test$DD02, show_na = TRUE) 
```

Hier ist der Output genau gleich (das ist ja in dem Datensatz keine NAs gibt).

::: callout-tip
## Tipp für den Bericht

Für die Abschlussberichte, braucht ihr die ganzen deskriptiven Informationen in APA7 formatierten Tabellen. Hierfür eignet sich besonders das Package `sjPlot`. Als Beispiel speichern wir zunächst die die vorherige deskriptive Statistik bezüglich des Alters als ein Objekt ab. Danach erstellen wir mit einer Funktion des genannten Packages eine schön formatierte Tabelle.
:::

```{r}
#| message: false
library(sjPlot)

descr_age <- describe(test$DD01_01)
tab_df(x = descr_age)

```

Die erstellte Tabelle kann sogar direkt als Word-Dokument abgespeichert werden, um danach noch weiter angepasst zu werden (z.B. Erstellen von Fußnoten, Tabellen-Titel, etc.). Wichtig dabei ist, dass nur die Endung .doc und nicht .docx funktioniert.

```{r}
#| eval: false

tab_df(
  x = descr_age,
  file = "table_descr_age.doc"
  )

```

Auch für die mit tabyl() erstellten Ergebnisse können wir eine Tabelle erstellen

```{r}

descr_sex <- tabyl(test$DD02)
tab_df(descr_sex)

```

Zudem können wir mit dem psych-Package auch eine Tabelle nach Gruppen erstellen. Dieser Output kann dann mit einer ähnlichen Funktion des sjPlot Package in einer Tabelle dargestellt werden.

```{r}
descr_age_by_sex <- describeBy(x = test$DD01_01,
           group = test$DD02) 
print(descr_age_by_sex)

tab_dfs(
  x = descr_age_by_sex,
  titles = c("Weiblich","Männlich")
  )

```

Es gibt auch die Möglichkeit mehrere Tabellen in ein Dokument zu packen und diese in einem Word-Dokument zu speichern:

```{r}
tab_dfs(
  x = list(descr_age, descr_sex), 
  titles = c("Descriptives of Age", "Descriptives of Sex")
  )
```

```{r}
#| eval: false
tab_dfs(
  x = list(descr_age, descr_sex), 
  titles = c("Descriptives of Age","Descriptives of Sex"),
  file = "descriptives_all.doc" # wieder als .doc abspeichern
  )
```

# Itemanalyse

## Schwierigkeit

## Trennschärfe

Für die Itemanalyse benötigen wir den Datensatz in denen nur die Items vorhanden sind. Diesen haben wir bereits in einem vorherigen Schritt erstellt. Bevor wir die Itemanalyse jedoch durchführen, müssen wir alle Items, die inverse kodiert sind rekodieren.

Dafür speichern wir alle inversen Items zunächst in einem Vektor ab. Anschließend verwenden wir die`mutate()` Funktion des `dplyr`-Package, mit welcher wir Variablen manupulieren/verändern können. Wir müssen dabei den Zusatz `across()` hinzunehmen, da wir mehreren Variablen gleichzeitig verändern wollen. Das Argument `.cols` gibt dabei an, welche Variablen wir verändern wollen. Mit dem Argument `.fns` spezifizieren wir, welche Funktion wir auf die Variablen anwenden wollen. Wir verwenden die Funktion `rec()` aus dem `sjmisc` Package. Die etwas ungewöhnliche Schreibweise mit der Tilde `~`und dem `.x` setzt sich wie folgt zusammen: Die Tilde müssen wir immer dann verwenden, wenn wir bei der Funktion, die wir anwenden zusätzlich Argumente spezifizieren (`rec = "0=4; 1=3; 2=2; 3=1; 4=0"`). Das `.x` verwenden wir als Platzhalter für alle Variablen, die wir verändern wollen (GIS9, GIS16, GIS17 und GIS18). Schließlich können wir mit dem `.names` Argument einen Namen für alle veränderten Variablen spezifizieren. Das Prefix `{col}` steht dabei für den ursprünglichen Variablennamen (z.B. GIS9). Mit dem Zusatz `{col_r}` wird hängen wir dem Präfix noch ein Suffix an (GIS9 -\> GIS9_r). Das Suffix kennzeichnet dabei, dass wir die Items rekodiert haben.

```{r}
#| message: false

# library(sjmisc)
# inverse_items <- c("GIS9","GIS16","GIS17","GIS18") 
# 
# data_gis_rec <- data_gis_item %>% 
#   mutate(across(
#     .cols = inverse_items, 
#     .fns = ~rec(x = .x, rec = "0=4; 1=3; 2=2; 3=1; 4=0"),
#     .names = "{col}_r"
#     )
#     ) %>% 
#   select(-inverse_items) 
# 
# colnames(data_gis_rec)

```

Jetzt können wir die Itemanalyse durchführen. Wir verwenden dafür eine Funktion aus dem sjPlot Package.

```{r}
tab_itemscale(
  df = data_item,
  factor.groups.titles = "Erste Itemanalyse"
  )
```

Wir sehen, dass die Variablen der Reihenfolge nach wie sie im Dataframe auftauchen, in die Tabelle aufgenommen werden. Dadurch sind die rekodierten Variablen am Ende der Tabelle platziert. Wir können die Reihenfolge der Items ändern, indem wir diese in einem Vektor spezifizieren. Anschließend verwenden wir wieder die `select()` Funktion und bringen dadurch die Variablen in die gewünschte Reihenfolge.

```{r}
# col_order <- c(
#   "GIS1","GIS2","GIS3","GIS4","GIS5","GIS6",
#   "GIS7","GIS8","GIS9_r","GIS10", "GIS11",
#   "GIS12","GIS13","GIS14","GIS15","GIS16_r",
#   "GIS17_r","GIS18_r", "GIS19","GIS20","GIS21"
#   )
# 
# data_gis_rec2 <- select(data_gis_rec, all_of(col_order))
# sjt.itemanalysis(
#   df = data_gis_rec2,
#   factor.groups.titles = "Desktiptive Ergebnisse der Itemanalyse (mit angepasster Reihenfolge)"
#   )
```

Wir sehen, dass alle invers gestellten Items eine schlechte Trennschärfe besitzen. Deswegen müssen diese aus der weiteren Analyse ausgeschlossen werden. Alle anderen Items besitzen sehr hohe Trennschärfen und können somit beibehalten werden.

```{r}
# drop_discrm <- c("GIS9_r", "GIS16_r","GIS17_r", "GIS18_r")
# 
# data_gis_final <- select(data_gis_rec2, -all_of(drop_discrm))

```

Mit diesem Datensatz können wir nun die finale Itemanalyse durchführen:

```{r}
# tab_itemscale(
#   df = data_gis_final,
#   factor.groups.titles = "Finale Itemanalyse"
#   )
```

Abschließend gibt es noch die Möglichkeit, McDonald´s $\omega$ als ein alternatives Reliabilitätsmaß (zusätzlich zu Cronbach´s $\alpha$) zu bestimmen.

```{r}
#| message: false
# omega_items <- omega(data_gis_final,
#                      plot = FALSE)
# omega_items$omega.tot
# omega_items$alpha
```
